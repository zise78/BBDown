# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build Latest

on: [push,workflow_dispatch]

env:
  DOTNET_SDK_VERSION: '8.0.*'

jobs:

  build-win-x64-arm64:
    
    runs-on: windows-latest
    
    steps:
      
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - run: dotnet publish BBDown -r win-x64 -c Release -o artifact-x64
      - run: dotnet publish BBDown -r win-arm64 -c Release -o artifact-arm64

      - name: Upload Artifact[win-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: BBDown_win-x64
          path: artifact-x64\BBDown.exe

      - name: Upload Artifact[win-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: BBDown_win-arm64
          path: artifact-arm64\BBDown.exe
  

  build-linux-x64:
    
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    
    steps:
      
      - run: apt-get update
      - run: apt-get install -y curl wget
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: apt-get install -y libicu-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev
      - run: dotnet publish BBDown -r linux-x64 -c Release -o artifact
      
      - name: Upload Artifact[linux-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: BBDown_linux-x64
          path: artifact/BBDown

  build-linux-arm64:
    
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-20220312201346-b2c2436
    
    steps:
      
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet publish BBDown -r linux-arm64 -c Release -p:StripSymbols=true -p:CppCompilerAndLinker=clang-9 -p:SysRoot=/crossrootfs/arm64 -o artifact
      
      - name: Upload Artifact[linux-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: BBDown_linux-arm64
          path: artifact/BBDown
          
  build-mac-x64-arm64:
    
    runs-on: macOS-latest
    
    steps:
      
      - uses: actions/checkout@v1
      
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet publish BBDown -r osx-arm64 -c Release -o artifact-arm64
      - run: dotnet publish BBDown -r osx-x64 -c Release -o artifact-x64

      
      - name: Upload Artifact[osx-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: BBDown_osx-x64
          path: artifact-x64/BBDown
          
      - name: Upload Artifact[osx-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: BBDown_osx-arm64
          path: artifact-arm64/BBDown
